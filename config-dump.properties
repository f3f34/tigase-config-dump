
--offline_lastestTime = 120
--registrationWhitelist = '127.0.0.1'
--roomNeedPush = 1
--s2s_domain_mapping_ip_val = 'olym.mjt.net=114.215.78.221'
--whitelistRegistrationOnly = 1
'13hk.mjt.net' = '113.106.95.189'
'ay.mjt.net' = '222.128.13.251'
bosh_connections_5280_type = 'refuse'
c2s_MaxInactiveTime = 8000000
c2s_connections_5223_type = 'refuse'
c2s_port = 5222
'cluster-mode' = false
'cm-ht-traffic-throttling' = 'xmpp:0:0:disc,bin:0:0:disc'
'cm-traffic-throttling' = 'xmpp:0:0:disc,bin:0:0:disc'
'config-type' = 'default'
debug = [ 'server' ]
'default-virtual-host' = 'hnmjt.mjt.net'
'elements-number-limit' = 100000
'hngkw.mjt.net' = '203.93.211.7'
'hq.mjt.net' = '211.166.248.198'
'hzpc.mjt.net' = '222.240.214.210'
'max-queue-size' = 10240
'nxy.mjt.net' = '218.95.181.64'
s2s_connections_5269_type = 'refuse'
s2s_port = 5269
'test1.mjt.net' = '192.168.1.166'
'update.mjt.net' = '192.168.1.161'
'vhost-anonymous-enabled' = false
'watchdog-delay' = 30000
'watchdog-timeout' = 15000
ws2s_connections_5290_type = 'refuse'
'zcah.mjt.net' = '1.202.218.234'
dataSource (class: tigase.db.beans.DataSourceBean,
    exportable: true) {
    default (class: tigase.db.beans.DataSourceBean$DataSourceMDConfigBean) {
        'pool-class' = null
        'pool-size' = 16
        'repo-class' = null
        'repo-uri' = 'mongodb://127.0.0.1:27017/tigase'
        'watchdog-frequency' = PT1H
        instance (class: tigase.mongodb.MongoDataSource) {
            'schema-management' = true
        }
    }
}
userRepository (class: tigase.db.beans.UserRepositoryMDPoolBean,
    exportable: true) {
    statistics = true
    default (class: tigase.db.beans.UserRepositoryMDPoolBean$UserRepositoryConfigBean) {
        'data-source' = null
        'pool-class' = null
        'pool-size' = 16
        'repo-class' = 'tigase.mongodb.MongoRepository'
        'repo-uri' = null
        instance (class: tigase.mongodb.MongoRepository) {
            'autoCreateUser=' = false
            'batch-size' = 100
        }
    }
}
authRepository (class: tigase.db.beans.AuthRepositoryMDPoolBean,
    exportable: true) {
    statistics = true
    default (class: tigase.db.beans.AuthRepositoryMDPoolBean$AuthRepositoryConfigBean) {
        'data-source' = null
        'pool-class' = null
        'pool-size' = 16
        'repo-class' = 'tigase.mongodb.MongoRepository'
        'repo-uri' = null
        credentialDecoders (class: tigase.auth.CredentialsDecoderBean) {
            'MD5-PASSWORD' (class: tigase.auth.credentials.entries.MD5PasswordCredentialsEntry$Decoder,
                active: false) {}
            'MD5-USERID-PASSWORD' (class: tigase.auth.credentials.entries.MD5UserIdPasswordCredentialsEntry$Decoder,
                active: false) {}
            'MD5-USERNAME-PASSWORD' (class: tigase.auth.credentials.entries.MD5UsernamePasswordCredentialsEntry$Decoder,
                active: false) {}
            PLAIN (class: tigase.auth.credentials.entries.PlainCredentialsEntry$Decoder) {}
            'SCRAM-SHA-1' (class: tigase.auth.credentials.entries.ScramSha1CredentialsEntry$Decoder) {
                algorithm = 'SHA1'
            }
            'SCRAM-SHA-256' (class: tigase.auth.credentials.entries.ScramSha256CredentialsEntry$Decoder) {
                algorithm = 'SHA-256'
            }
        }
        credentialsEncoders (class: tigase.auth.CredentialsEncoderBean) {
            'MD5-PASSWORD' (class: tigase.auth.credentials.entries.MD5PasswordCredentialsEntry$Encoder,
                active: false) {}
            'MD5-USERID-PASSWORD' (class: tigase.auth.credentials.entries.MD5UserIdPasswordCredentialsEntry$Encoder,
                active: false) {}
            'MD5-USERNAME-PASSWORD' (class: tigase.auth.credentials.entries.MD5UsernamePasswordCredentialsEntry$Encoder,
                active: false) {}
            PLAIN (class: tigase.auth.credentials.entries.PlainCredentialsEntry$Encoder,
                active: false) {}
            'SCRAM-SHA-1' (class: tigase.auth.credentials.entries.ScramSha1CredentialsEntry$Encoder) {
                algorithm = 'SHA1'
                iterations = 4096
            }
            'SCRAM-SHA-256' (class: tigase.auth.credentials.entries.ScramSha256CredentialsEntry$Encoder) {
                algorithm = 'SHA-256'
                iterations = 4096
            }
        }
        instance (class: tigase.mongodb.MongoRepository) {
            'autoCreateUser=' = false
            'batch-size' = 100
        }
    }
}
amp (class: tigase.server.amp.AmpComponent) {
    admins = [  ]
    compId = 'amp@localhost'
    defHostname = localhost
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@66e21568
    ]
    'max-queue-size' = 10240
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@7f73ce28
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 16
    'processing-out-threads' = 16
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    alert (class: tigase.server.amp.action.Alert) {
        security = STRICT
    }
    broadcast (class: tigase.server.amp.action.Broadcast) {}
    commands {}
    deliver (class: tigase.server.amp.action.Deliver) {
        security = STRICT
    }
    drop (class: tigase.server.amp.action.Drop) {
        security = STRICT
    }
    error (class: tigase.server.amp.action.Error) {
        security = STRICT
    }
    msgBroadcastRepository (class: tigase.server.amp.db.MsgBroadcastRepository$MsgBroadcastRepositoryBean) {
        dataSourceSelection = List
        statistics = true
        aliases {}
        default (class: tigase.server.amp.db.MsgBroadcastRepository$MsgBroadcastRepositoryBean$MsgBroadcastRepositoryConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.mongodb.MongoMsgBroadcastRepository) {
                'batch-size' = 100
            }
        }
    }
    notify (class: tigase.server.amp.action.Notify) {
        security = STRICT
    }
    store (class: tigase.server.amp.action.Store) {
        security = STRICT
    }
}
beanSelector (class: tigase.kernel.beans.selector.ServerBeanSelector,
    exportable: true) {}
bosh (class: tigase.server.bosh.BoshConnectionManager) {
    admins = [  ]
    'batch-queue-timeout' = 100L
    'bosh-close-connection' = false
    'bosh-extra-headers-file' = 'etc/bosh-extra-headers.txt'
    'bosh-session-close-delay' = 0L
    'client-access-policy-file' = 'etc/client-access-policy.xml'
    compId = 'bosh@localhost'
    'concurrent-requests' = 2
    connectionDelay = 2000L
    'cross-domain-policy-file' = 'etc/cross-domain-policy.xml'
    defHostname = localhost
    'elements-number-limit' = 100000
    'hold-requests' = 1
    ifc = [ '*' ]
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@611b35d6
    ]
    last_minute_bin_limit = 0L
    last_minute_packets_limit = 0L
    'max-batch-size' = 15
    'max-inactivity' = 10L
    'max-queue-size' = 10240
    'max-session-waiting-packets' = 100
    'max-wait' = 30L
    maxInactivityTime = 600000L
    'min-polling' = 10L
    'net-buffer' = 2048
    'net-buffer-limit' = 2097152
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@2282400e
    ]
    'packet-delivery-retry-count' = 15
    pipelining = false
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 16
    'processing-out-threads' = 16
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    'send-node-hostname' = true
    'sid-logger-level' = 'OFF'
    total_bin_limit = 0L
    total_packets_limit = 0L
    trafficThrottling = 'xmpp:0:0:disc,bin:0:0:disc'
    trusted = null
    'watchdog-delay' = 30000L
    'watchdog-ping-type' = XMPP
    'watchdog-timeout' = 15000L
    xmppLimitAction = DISCONNECT
    'client-trust-manager-factory' (class: tigase.server.xmppclient.ClientTrustManagerFactory) {
        clientCertCA = null
        clientCertRequired = false
    }
    commands {}
    connections (class: tigase.server.ConnectionManager$PortsConfigBean,
        exportable: true) {
        ports = [ 5280 ]
        5280 (class: tigase.server.ConnectionManager$PortConfigBean) {
            ifc = null
            'new-connections-throttling' = 1000L
            socket = plain
            type = accept
        }
    }
    routingComputer (class: tigase.util.routing.RoutingsContainer$SingleMode) {}
    seeOtherHost (class: tigase.server.xmppclient.SeeOtherHost) {
        defaultHost = null
        phases = [
            OPEN
        ]
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'hardened-mode' = false
        'tls-enabled-ciphers' = null
        'tls-enabled-protocols' = null
        'tls-jdk-nss-bug-workaround-active' = false
    }
    'stream-error-counter' (class: tigase.server.xmppclient.StreamErrorCounterIOProcessor,
        active: false) {}
    'urn:xmpp:sm:3' (class: tigase.server.xmppclient.StreamManagementIOProcessor,
        active: false) {
        'ack-request-count' = 10
        'ignore-undelivered-presence' = true
        'max-resumption-timeout' = 900
        'resumption-timeout' = 60
    }
}
c2s (class: tigase.server.xmppclient.ClientConnectionManager) {
    admins = [  ]
    compId = 'c2s@localhost'
    connectionDelay = 2000L
    'cross-domain-policy-file' = 'etc/cross-domain-policy.xml'
    defHostname = localhost
    'elements-number-limit' = 100000
    ifc = [ '*' ]
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@2976c0dd
    ]
    last_minute_bin_limit = 0L
    last_minute_packets_limit = 0L
    'max-queue-size' = 10240
    maxInactivityTime = 8000000L
    'net-buffer' = 2048
    'net-buffer-limit' = 2097152
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@543d5863
    ]
    'packet-delivery-retry-count' = 15
    pipelining = false
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 16
    'processing-out-threads' = 16
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    total_bin_limit = 0L
    total_packets_limit = 0L
    trafficThrottling = 'xmpp:0:0:disc,bin:0:0:disc'
    trusted = null
    'watchdog-delay' = 30000L
    'watchdog-ping-type' = XMPP
    'watchdog-timeout' = 15000L
    xmppLimitAction = DISCONNECT
    'client-trust-manager-factory' (class: tigase.server.xmppclient.ClientTrustManagerFactory) {
        clientCertCA = null
        clientCertRequired = false
    }
    commands {}
    connections (class: tigase.server.ConnectionManager$PortsConfigBean,
        exportable: true) {
        ports = [ 5222, 5223 ]
        5222 (class: tigase.server.ConnectionManager$PortConfigBean) {
            ifc = null
            'new-connections-throttling' = 200L
            socket = plain
            type = accept
        }
        5223 (class: tigase.server.ConnectionManager$SecPortConfigBean) {
            ifc = null
            'new-connections-throttling' = 50L
            socket = ssl
            type = accept
        }
    }
    routingComputer (class: tigase.util.routing.RoutingsContainer$SingleMode) {}
    seeOtherHost (class: tigase.server.xmppclient.SeeOtherHost) {
        defaultHost = null
        phases = [
            OPEN
        ]
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'hardened-mode' = false
        'tls-enabled-ciphers' = null
        'tls-enabled-protocols' = null
        'tls-jdk-nss-bug-workaround-active' = false
    }
    'stream-error-counter' (class: tigase.server.xmppclient.StreamErrorCounterIOProcessor,
        active: false) {}
    'urn:xmpp:sm:3' (class: tigase.server.xmppclient.StreamManagementIOProcessor) {
        'ack-request-count' = 10
        'ignore-undelivered-presence' = true
        'max-resumption-timeout' = 900
        'resumption-timeout' = 60
    }
}
'certificate-container' (class: tigase.io.CertificateContainer,
    exportable: true) {
    'sni-disable' = false
    'ssl-certs-location' = [ 'certs/' ]
    'ssl-def-cert-domain' = 'default'
    'trusted-certs-dir' = [ '/etc/ssl/certs' ]
    'custom-certificates' {}
}
classUtilBean (class: tigase.util.reflection.ClassUtilBean,
    exportable: true) {}
defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility,
    exportable: true) {}
defaultTypesConverter (class: tigase.kernel.DefaultTypesConverter,
    exportable: true) {}
eventBus (class: tigase.eventbus.impl.EventBusImplementation,
    exportable: true) {}
eventbus (class: tigase.eventbus.component.EventBusComponent) {
    admins = [  ]
    compId = 'eventbus@localhost'
    defHostname = localhost
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@35dece42
    ]
    'max-queue-size' = 10240
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@dd3f8aa
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    affiliations (class: tigase.eventbus.component.stores.AffiliationStore) {
        allowedSubscribers = null
    }
    commands {}
    disco (class: tigase.eventbus.component.EventbusDiscoveryModule) {}
    eventBusRegistrar (class: tigase.eventbus.impl.EventsRegistrar) {}
    'jabber:iq:version' (class: tigase.component.modules.impl.JabberVersionModule) {}
    localEventBus (class: tigase.eventbus.impl.EventBusImplementation) {}
    publisher (class: tigase.eventbus.component.EventPublisherModule) {}
    receiver (class: tigase.eventbus.component.EventReceiverModule) {}
    responseManager (class: tigase.component.responses.ResponseManager) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    scriptEngineManager (class: javax.script.ScriptEngineManager) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    subscribe (class: tigase.eventbus.component.SubscribeModule) {}
    subscriptionStore (class: tigase.eventbus.component.stores.SubscriptionStore) {}
    unsubscribe (class: tigase.eventbus.component.UnsubscribeModule) {}
    'urn:xmpp:ping' (class: tigase.component.modules.impl.XmppPingModule) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
ext (class: tigase.server.ext.ComponentProtocol,
    active: false) {
    'auth-timeout' = 15L
    'bind-ext-hostnames' = [  ]
    'close-on-seq-error' = true
    connectionDelay = 2000L
    'elements-number-limit' = 100000
    experimental = false
    'identity-type' = 'generic'
    ifc = [ '*' ]
    'max-auth-attempts' = 1
    'net-buffer' = 2048
    connections (class: tigase.server.ConnectionManager$PortsConfigBean) {
        ports = null
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    }
    defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    repository (class: tigase.server.ext.ServerCompDBRepository) {
        'external-components-group' = 'server-default-items-list'
        'repo-autoreload-interval' = 30L
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'hardened-mode' = false
        'tls-enabled-ciphers' = null
        'tls-enabled-protocols' = null
        'tls-jdk-nss-bug-workaround-active' = false
    }
}
'ext-disco' (class: tigase.server.extdisco.ExternalServiceDiscoveryComponent,
    active: false) {
    admins = [  ]
    compId = null
    defHostname = localhost
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@3d615b2e
    ]
    'max-queue-size' = 10240
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@3a1f2a1
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'scheduler-threads' = 1
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    commands (class: tigase.component.modules.impl.AdHocCommandModule) {}
    defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    disco (class: tigase.component.modules.impl.DiscoveryModule) {}
    extDiscoModule (class: tigase.server.extdisco.ExternalServiceDiscoveryModule) {}
    externalServiceDiscoveryRepository (class: tigase.server.extdisco.ExtServiceDiscoveryUserRepoRepository) {
        'repo-autoreload-interval' = 0L
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
'ext-man' (class: tigase.server.ext.ComponentProtocolManager,
    active: false) {
    admins = [  ]
    compId = null
    defHostname = localhost
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@40ce9049
    ]
    'max-queue-size' = 10240
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@52ca2652
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'scheduler-threads' = 1
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    commands (class: tigase.component.modules.impl.AdHocCommandModule) {}
    defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    disco (class: tigase.component.modules.impl.DiscoveryModule) {}
    repository (class: tigase.server.ext.ManagerCompDBRepository) {
        'external-components-group' = 'component-default-items-list'
        'repo-autoreload-interval' = 30L
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
logging (class: tigase.conf.LoggingBean) {
    debug = [ 'server' ]
    'debug-packages' = null
    'packet-debug-full' = false
    rootHandlers = [ 'java.util.logging.ConsoleHandler', 'java.util.logging.FileHandler' ]
    rootLevel = CONFIG
    'shutdown-thread-dump' = true
    handlers {
        ' java.util.logging.FileHandler' {
            count = 45
            level = 'FINEST'
            limit = 20000000
        }
        'java.util.logging.ConsoleHandler' {
            formatter = 'tigase.util.log.LogFormatter'
            level = WARNING
        }
        'java.util.logging.FileHandler' {
            append = true
            count = 5
            formatter = 'tigase.util.log.LogFormatter'
            level = ALL
            limit = 10000000
            pattern = 'logs/tigase.log'
        }
    }
    loggers {
        tigase {
            useParentHandlers = true
        }
        'tigase.kernel.core.Kernel' {
            level = 'CONFIG'
        }
    }
}
'message-archive' (class: tigase.archive.MessageArchiveComponent) {
    admins = [  ]
    compId = 'message-archive@localhost'
    defHostname = localhost
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@65c5bf0e
    ]
    'max-queue-size' = 10240
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@697d6ded
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 16
    'processing-out-threads' = 16
    'remove-expired-messages' = false
    'remove-expired-messages-delay' = PT10M
    'remove-expired-messages-period' = PT24H
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    'tags-support' = false
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    archiving (class: tigase.archive.modules.ArchivingModule) {}
    commands {}
    disco (class: tigase.component.modules.impl.DiscoveryModule) {}
    listCollections (class: tigase.archive.xep0136.modules.ListCollectionsModule) {}
    mamGetFormModule (class: tigase.xmpp.mam.modules.GetFormModule) {}
    mamItemHandler (class: tigase.archive.xep0313.MAMItemHandler) {}
    mamQueryModule (class: tigase.archive.xep0313.MAMQueryModule) {}
    mamQueryParser (class: tigase.archive.xep0313.MAMQueryParser) {}
    queryTags (class: tigase.archive.xep0136.modules.QueryTagsModule) {}
    removeItems (class: tigase.archive.xep0136.modules.RemoveItemsModule) {}
    repositoryPool (class: tigase.archive.db.MessageArchiveRepositoryPool) {
        dataSourceSelection = List
        statistics = true
        aliases {}
        default (class: tigase.archive.db.MessageArchiveRepositoryPool$MessageArchiveRepositoryConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.mongodb.archive.MongoMessageArchiveRepository) {
                'batch-size' = 100
                'store-plaintext-body' = true
            }
        }
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    retrieveItems (class: tigase.archive.xep0136.modules.RetrieveItemsModule) {}
    saveItems (class: tigase.archive.xep0136.modules.SaveItemsModule) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
    xep0136CollectionHandler (class: tigase.archive.xep0136.modules.ListCollectionsModule$Xep0136CollectionHandler) {}
    xep0136ItemHandler (class: tigase.archive.xep0136.modules.RetrieveItemsModule$Xep0136ItemHandler) {}
    xep0136QueryParser (class: tigase.archive.xep0136.Xep0136QueryParser) {}
}
'message-router' (class: tigase.server.MessageRouter) {
    admins = [  ]
    compId = 'message-router@localhost'
    defHostname = localhost
    disco_name = 'Tigase'
    disco_show_version = true
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@6adadb65
    ]
    'max-queue-size' = 10240
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@5d05f453
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 16
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    commands {}
    'update-checker' (class: tigase.util.updater.UpdatesChecker) {
        admins = [  ]
        delay = PT168H
        notificationsEnabled = true
        period = PT168H
    }
}
monitor (class: tigase.monitor.MonitorComponent) {
    admins = [  ]
    compId = 'monitor@localhost'
    defHostname = localhost
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@5efeb117
    ]
    'max-queue-size' = 10240
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@160b4809
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 1
    'processing-out-threads' = 1
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    TasksScriptRegistrar (class: tigase.monitor.TasksScriptRegistrar) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    bindings (class: javax.script.SimpleBindings) {}
    commands {}
    configItemRepository (class: tigase.monitor.TaskConfigItemJDBCRepository) {
        'repo-autoreload-interval' = 0L
    }
    'connections-task' (class: tigase.monitor.tasks.ConnectionsTask) {
        enabled = false
        period = 1000L
        threshold = 80
        thresholdMinimal = 10
    }
    'cpu-temp-task' (class: tigase.monitor.tasks.CpuTempTask) {
        cpuTempThreshold = 90
        enabled = false
        period = 10000L
    }
    disco (class: tigase.monitor.modules.DiscoveryMonitorModule) {}
    'disk-task' (class: tigase.monitor.tasks.DiskTask) {
        enabled = false
        period = 60000L
        threshold = 0.8f
    }
    'jabber:iq:version' (class: tigase.component.modules.impl.JabberVersionModule) {}
    'load-checker-task' (class: tigase.monitor.tasks.LoadCheckerTask) {
        averageLoadThreshold = 10L
        enabled = false
        period = 1000L
    }
    'logger-task' (class: tigase.monitor.tasks.LoggerTask) {
        enabled = false
        levelTreshold = WARNING
    }
    'memory-checker-task' (class: tigase.monitor.tasks.MemoryCheckerTask) {
        enabled = false
        maxHeapMemUsagePercentThreshold = 90
        maxNonHeapMemUsagePercentThreshold = 90
        period = 1000L
    }
    responseManager (class: tigase.component.responses.ResponseManager) {}
    runtime (class: tigase.server.monitor.MonitorRuntime) {}
    'sample-task' (class: tigase.monitor.tasks.SampleTask) {
        enabled = false
        period = 1000L
    }
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    scriptEngineManager (class: javax.script.ScriptEngineManager) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    timerTaskService (class: tigase.monitor.MonitorComponent$1) {}
    'urn:xmpp:ping' (class: tigase.component.modules.impl.XmppPingModule) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
    'x-add-task' (class: tigase.monitor.modules.AddScriptTaskCommand) {}
    'x-add-timer-task' (class: tigase.monitor.modules.AddTimerScriptTaskCommand) {}
    'x-config' (class: tigase.monitor.modules.ConfigureTaskCommand) {}
    'x-delete-task' (class: tigase.monitor.modules.DeleteScriptTaskCommand) {}
    'x-info' (class: tigase.monitor.modules.InfoTaskCommand) {}
}
msgRepository (class: tigase.server.amp.db.MsgRepository$MsgRepositoryMDBean,
    exportable: true) {
    dataSourceSelection = List
    statistics = true
    aliases {}
    default (class: tigase.server.amp.db.MsgRepository$MsgRepositoryMDBean$MsgRepositoryConfigBean) {
        'data-source' = null
        'repo-class' = null
        instance (class: tigase.mongodb.MongoMsgRepository) {
            'batch-size' = 100
            'store-limit' = 100L
            'user-store-limit-enable' = false
        }
    }
}
muc (class: tigase.muc.MUCComponent) {
    admins = [  ]
    compId = 'muc@localhost'
    defHostname = localhost
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@149b4d20
    ]
    'max-queue-size' = 10240
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@664e848c
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 16
    'processing-out-threads' = 16
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    admin (class: tigase.muc.modules.ModeratorModule) {}
    commands {}
    default_room_config {}
    disco (class: tigase.muc.modules.DiscoveryModule) {}
    ghostbuster (class: tigase.muc.Ghostbuster2) {
        delay = PT10M
        period = PT5M
    }
    groupchat (class: tigase.muc.modules.GroupchatMessageModule) {}
    historyProviderPool (class: tigase.muc.history.HistoryProviderMDBean) {
        dataSourceSelection = List
        'map-component-to-bare-domain' = false
        statistics = true
        aliases {}
        default (class: tigase.muc.history.HistoryProviderMDBean$HistoryProviderConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.mongodb.muc.MongoHistoryProvider) {
                'batch-size' = 100
            }
        }
    }
    invitations (class: tigase.muc.modules.MediatedInvitationModule) {}
    iqforwarder (class: tigase.muc.modules.IqStanzaForwarderModule) {}
    'jabber:iq:version' (class: tigase.component.modules.impl.JabberVersionModule) {}
    mamGetFormModule (class: tigase.xmpp.mam.modules.GetFormModule) {}
    mamItemHandler (class: tigase.xmpp.mam.MAMItemHandler) {}
    mamQueryModule (class: tigase.muc.modules.MAMQueryModule) {}
    mamQueryParser (class: tigase.xmpp.mam.MAMQueryParser) {}
    'muc-dao' (class: tigase.muc.repository.MucDAOMDBean) {
        dataSourceSelection = List
        'map-component-to-bare-domain' = false
        statistics = true
        aliases {}
        default (class: tigase.muc.repository.MucDAOMDBean$MucDAOProviderConfigBean) {
            'data-source' = null
            'repo-class' = null
            instance (class: tigase.mongodb.muc.MongoMucDAO) {}
        }
    }
    'muc-logger' (class: tigase.muc.logger.RoomChatLogger,
        active: false) {}
    mucConfig (class: tigase.muc.MUCConfig,
        exportable: true) {
        'ghostbuster-enabled' = true
        'legacy-delayed-delivery-enabled' = false
        'message-filter-enabled' = true
        'muc-add-id-to-message-if-missing' = true
        'muc-allow-chat-states' = false
        'muc-lock-new-room' = true
        'muc-multi-item-allowed' = true
        'presence-filter-enabled' = false
        'room-log-directory' = './logs/'
        'welcome-message' = true
    }
    mucRepository (class: tigase.muc.repository.inmemory.InMemoryMucRepository) {}
    ownerModule (class: tigase.muc.modules.RoomConfigurationModule) {}
    presences (class: tigase.muc.modules.PresenceModuleImpl) {}
    privatemessages (class: tigase.muc.modules.PrivateMessageModule) {}
    responseManager (class: tigase.component.responses.ResponseManager) {}
    roomFactory (class: tigase.muc.Room$RoomFactoryImpl,
        exportable: true) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    unique (class: tigase.muc.modules.UniqueRoomNameModule) {}
    'urn:xmpp:ping' (class: tigase.component.modules.impl.XmppPingModule) {}
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
nonAuthUserRepository (class: tigase.db.NonAuthUserRepositoryImpl,
    exportable: true) {
    'offline-user-autocreate' = false
}
'registration-throttling' (class: tigase.server.xmppclient.RegistrationThrottling,
    active: false,
    exportable: true) {
    limit = 4
    period = PT24H
}
rootSslContextContainer (class: tigase.io.SSLContextContainer$Root,
    exportable: true) {
    'hardened-mode' = false
    'tls-enabled-ciphers' = null
    'tls-enabled-protocols' = null
    'tls-jdk-nss-bug-workaround-active' = false
}
rosterFactory (class: tigase.xmpp.impl.roster.RosterFactory$Bean,
    exportable: true) {
    'roster-implementation' = 'tigase.xmpp.impl.roster.RosterFlat'
}
s2s (class: tigase.server.xmppserver.S2SConnectionManager) {
    admins = [  ]
    compId = 's2s@localhost'
    connectionDelay = 2000L
    'cross-domain-policy-file' = 'etc/cross-domain-policy.xml'
    defHostname = localhost
    'elements-number-limit' = 100000
    ifc = [ '*' ]
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@4d93f75b
    ]
    last_minute_bin_limit = 0L
    last_minute_packets_limit = 0L
    'max-queue-size' = 10240
    maxInactivityTime = 21600000L
    'net-buffer' = 2048
    'net-buffer-limit' = 20971520
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@114a5e0
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 16
    'processing-out-threads' = 16
    'scheduler-threads' = 4
    'scripts-dir' = 'scripts/admin'
    total_bin_limit = 0L
    total_packets_limit = 0L
    trafficThrottling = 'xmpp:0:0:disc,bin:0:0:disc'
    trusted = null
    'watchdog-delay' = 30000L
    'watchdog-ping-type' = XMPP
    'watchdog-timeout' = 15000L
    xmppLimitAction = DISCONNECT
    cidConnectionsOpenerService (class: tigase.server.xmppserver.CIDConnections$CIDConnectionsOpenerService) {
        outgoingOpenThreads = 4
    }
    commands {}
    connections (class: tigase.server.ConnectionManager$PortsConfigBean,
        exportable: true) {
        ports = [ 5269 ]
        5269 (class: tigase.server.ConnectionManager$PortConfigBean) {
            ifc = null
            'new-connections-throttling' = 100L
            socket = plain
            type = accept
        }
    }
    dialback (class: tigase.server.xmppserver.proc.Dialback) {
        authenticationTimeOut = 30L
        'ejabberd-bug-workaround' = true
        'skip-tls-hostnames' = null
    }
    domainServerNameMapper (class: tigase.server.xmppserver.S2SConnectionManager$DomainServerNameMapper) {
        entries {}
    }
    packetChecker (class: tigase.server.xmppserver.proc.PacketChecker) {
        allowOtherDomainsWithSameIp = false
        allowedOtherDomainsWithSameIpWhitelist = null
        allowedOtherDomainsMap {}
    }
    s2sRandomSelector (class: tigase.server.xmppserver.S2SRandomSelector) {}
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'hardened-mode' = false
        'tls-enabled-ciphers' = null
        'tls-enabled-protocols' = null
        'tls-jdk-nss-bug-workaround-active' = false
    }
    startTLS (class: tigase.server.xmppserver.proc.StartTLS) {
        'skip-tls-hostnames' = null
    }
    startZlib (class: tigase.server.xmppserver.proc.StartZlib) {
        'skip-tls-hostnames' = null
    }
    streamError (class: tigase.server.xmppserver.proc.StreamError) {
        'skip-tls-hostnames' = null
    }
    streamFeatures (class: tigase.server.xmppserver.proc.StreamFeatures) {
        'skip-tls-hostnames' = null
    }
    streamOpen (class: tigase.server.xmppserver.proc.StreamOpen) {
        'skip-tls-hostnames' = null
    }
    'urn:xmpp:sm:3' () {
        'resumption-timeout' = 60
    }
}
'sess-man' (class: tigase.server.xmppsession.SessionManager) {
    'active-user-timeframe' = 300000L
    admins = [  ]
    'auth-timeout' = 120L
    compId = 'sess-man@localhost'
    defHostname = localhost
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@3a41be25
    ]
    'max-queue-size' = 10240
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@4f281aaf
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 64
    'processing-out-threads' = 64
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    'skip-privacy' = false
    'sm-threads-factor' = 1
    'sm-threads-pool' = 'default'
    'stale-connection-closer-queue-size' = true
    trusted = null
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    adHocCommandModule (class: tigase.component.modules.impl.AdHocCommandModule) {}
    amp (class: tigase.xmpp.impl.MessageAmp) {
        'amp-jid' = 'amp@localhost'
        queueSize = null
        'quota-exceeded' = error
        threadsNo = 4
        message (class: tigase.xmpp.impl.Message) {
            'delivery-rules' = inteligent
            queueSize = null
            'silently-ignore-message' = false
            threadsNo = 4
        }
        msgoffline (class: tigase.xmpp.impl.OfflineMessages) {
            'msg-repo-class' = null
            'msg-store-offline-paths' = [  ]
            queueSize = null
            threadsNo = 4
        }
    }
    'auth-credentials-add' (class: tigase.auth.adhoc.AddUserCredentials) {}
    'auth-credentials-delete' (class: tigase.auth.adhoc.DeleteUserCredentials) {}
    'auth-credentials-list' (class: tigase.auth.adhoc.ShowUserCredentials) {}
    'brute-force-locker' (class: tigase.auth.BruteForceLockerBean) {}
    commands {}
    'default-handler' (class: tigase.server.xmppsession.SessionManager$DefaultHandlerProc) {
        queueSize = null
        threadsNo = 16
    }
    disco (class: tigase.xmpp.impl.ServiceDiscovery) {
        queueSize = null
        threadsNo = 4
    }
    'domain-filter' (class: tigase.xmpp.impl.DomainFilter) {
        queueSize = null
        threadsNo = 4
    }
    'dynamic-rosters' (class: tigase.xmpp.impl.roster.DynamicRoster,
        active: false) {
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    }
    'error-counter' (class: tigase.xmpp.impl.ErrorCounter,
        active: false) {
        queueSize = null
        threadsNo = 4
    }
    'http://jabber.org/protocol/commands' (class: tigase.xmpp.impl.JabberIqCommand) {
        queueSize = null
        threadsNo = 4
    }
    'http://jabber.org/protocol/jingle' (class: tigase.xmpp.impl.Jingle,
        active: false) {
        queueSize = null
        threadsNo = 4
    }
    'http://jabber.org/protocol/offline' (class: tigase.xmpp.impl.FlexibleOfflineMessageRetrieval,
        active: false) {
        queueSize = null
        threadsNo = 4
    }
    'http://jabber.org/protocol/stats' (class: tigase.xmpp.impl.JabberIqStats) {
        queueSize = null
        threadsNo = 4
    }
    'invisible-command' (class: tigase.xmpp.impl.InvisibleCommand,
        active: false) {
        queueSize = null
        threadsNo = 4
    }
    'jabber:iq:auth' (class: tigase.xmpp.impl.JabberIqAuth) {
        queueSize = null
        threadsNo = 4
    }
    'jabber:iq:iq' (class: tigase.xmpp.impl.JabberIqIq,
        active: false) {
        queueSize = null
        threadsNo = 4
    }
    'jabber:iq:last-marker' (class: tigase.xmpp.impl.LastActivityMarker,
        active: false) {
        message = false
        persistAllToRepository = true
        presence = true
        queueSize = null
        threadsNo = 4
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        'jabber:iq:last' (class: tigase.xmpp.impl.LastActivity,
            active: false) {
            'protection-level' = ALL
            queueSize = null
            threadsNo = 4
        }
    }
    'jabber:iq:privacy' (class: tigase.xmpp.impl.JabberIqPrivacy) {
        queueSize = null
        threadsNo = 4
        privacyListOfflineCache (class: tigase.xmpp.impl.JabberIqPrivacy$PrivacyListOfflineCache,
            active: false) {
            size = 10000
        }
    }
    'jabber:iq:private' (class: tigase.xmpp.impl.JabberIqPrivate) {
        queueSize = null
        threadsNo = 4
    }
    'jabber:iq:register' (class: tigase.xmpp.impl.JabberIqRegister) {
        captchaRequired = false
        emailRequired = true
        maxCaptchaRepetition = 3
        'oauth-consumer-key' = null
        'oauth-consumer-secret' = null
        queueSize = null
        'registration-blacklist' = [  ]
        'registration-whitelist' = [  ]
        'registrations-per-second' = 100000L
        'signed-form-required' = false
        threadsNo = 4
        'whitelist-registration-only' = false
        CaptchaProvider (class: tigase.xmpp.impl.CaptchaProvider) {}
        tokenBucketPool (class: tigase.xmpp.impl.TokenBucketPool) {}
    }
    'jabber:iq:roster' (class: tigase.xmpp.impl.JabberIqRoster) {
        'auto-authorize' = false
        empty_name_enabled = false
        max_roster_size = 746
        queueSize = null
        threadsNo = 16
    }
    'jabber:iq:version' (class: tigase.xmpp.impl.JabberIqVersion) {
        queueSize = null
        threadsNo = 4
    }
    message (class: tigase.xmpp.impl.Message,
        active: false) {
        'delivery-rules' = inteligent
        queueSize = null
        'silently-ignore-message' = false
        threadsNo = 4
    }
    'message-all' (class: tigase.xmpp.impl.MessageAll,
        active: false) {
        queueSize = null
        threadsNo = 4
    }
    'message-archive' (class: tigase.archive.processors.MessageArchivePlugin) {
        'component-jid' = 'message-archive@localhost'
        'default-store-method' = body
        'msg-archive-paths' = [ '-/message/result[urn:xmpp:mam:1]', '/message/body' ]
        queueSize = null
        'required-store-method' = false
        'store-muc-messages' = user
        threadsNo = 4
        message (class: tigase.xmpp.impl.Message) {
            'delivery-rules' = inteligent
            queueSize = null
            'silently-ignore-message' = false
            threadsNo = 4
        }
    }
    'message-archive-xep-0136' (class: tigase.archive.processors.Xep0136MessageArchivingProcessor) {
        queueSize = null
        threadsNo = 4
    }
    'message-carbons' (class: tigase.xmpp.impl.MessageCarbons) {
        queueSize = null
        threadsNo = 4
    }
    'message-vhost-forward' (class: tigase.xmpp.impl.MessageForwarding,
        active: false) {
        queueSize = null
        threadsNo = 4
    }
    mobile_v1 (class: tigase.xmpp.impl.MobileV1,
        active: false) {
        'max-queue-size' = 10240
        'max-timeout' = 360000L
        queueSize = null
        threadsNo = 4
    }
    mobile_v2 (class: tigase.xmpp.impl.MobileV2,
        active: false) {
        'max-queue-size' = 10240
        queueSize = null
        threadsNo = 4
    }
    mobile_v3 (class: tigase.xmpp.impl.MobileV3,
        active: false) {
        'max-queue-size' = 10240
        queueSize = null
        threadsNo = 4
    }
    motd (class: tigase.xmpp.impl.MotdProcessor,
        active: false) {
        queueSize = null
        threadsNo = 4
    }
    'msg-offline-pubsub-publisher-notifier' (class: tigase.xmpp.impl.OfflineMessages$PubSubPublisherNotifier,
        active: false,
        exportable: true) {
        'msg-pubsub-jid' = null
        'msg-pubsub-node' = null
        'msg-pubsub-publisher' = null
    }
    msgoffline (class: tigase.xmpp.impl.OfflineMessages,
        active: false) {
        'msg-repo-class' = null
        'msg-store-offline-paths' = [  ]
        queueSize = null
        threadsNo = 4
    }
    'pep-simple' (class: tigase.xmpp.impl.PepPlugin,
        active: false) {
        queueSize = null
        threadsNo = 4
    }
    'presence-offline' (class: tigase.xmpp.impl.PresenceOffline,
        active: false) {
        'cache-size' = 1000
        'delay-stamp' = true
        'probe-full-jid' = false
        queueSize = null
        'skip-offline' = false
        'skip-offline-sys' = true
        threadsNo = 16
    }
    'presence-state' (class: tigase.xmpp.impl.PresenceState) {
        'enable-roster-lazy-loading' = true
        'offline-roster-last-seen' = null
        'presence-global-forward' = null
        'probe-full-jid' = false
        queueSize = null
        'skip-offline' = false
        'skip-offline-sys' = true
        threadsNo = 16
    }
    'presence-subscription' (class: tigase.xmpp.impl.PresenceSubscription) {
        'auto-authorize' = false
        'probe-full-jid' = false
        queueSize = null
        'skip-offline' = false
        'skip-offline-sys' = true
        threadsNo = 16
    }
    'remote-roster-management' (class: tigase.xmpp.impl.RemoteRosterManagement,
        active: false) {
        queueSize = null
        threadsNo = 4
    }
    'sasl-provider' (class: tigase.auth.TigaseSaslProvider) {
        'callback-handler-factory' (class: tigase.auth.CallbackHandlerFactory) {}
        'mechanism-selector' (class: tigase.auth.DefaultMechanismSelector) {
            'allowed-mechanisms' = [  ]
            'non-plain-password-allowed-mechanisms' = [ 'PLAIN', 'ANONYMOUS', 'EXTERNAL' ]
        }
        tigaseSaslServerFactory (class: tigase.auth.mechanisms.TigaseSaslServerFactory) {}
    }
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    'session-close' (class: tigase.server.xmppsession.SessionManager$SessionCloseProc) {
        queueSize = null
        threadsNo = 16
    }
    'session-open' (class: tigase.server.xmppsession.SessionManager$SessionOpenProc) {
        queueSize = null
        threadsNo = 8
    }
    'shiku-auto-reply' (class: tigase.olym.OlymAutoReplyPlugin) {
        queueSize = null
        threadsNo = 4
    }
    starttls (class: tigase.xmpp.impl.StartTLS) {
        queueSize = null
        threadsNo = 4
    }
    'urn:ietf:params:xml:ns:xmpp-bind' (class: tigase.xmpp.impl.BindResource) {
        'def-resource-prefix' = 'tigase-'
        queueSize = null
        threadsNo = 4
    }
    'urn:ietf:params:xml:ns:xmpp-sasl' (class: tigase.xmpp.impl.SaslAuth) {
        queueSize = null
        threadsNo = 16
    }
    'urn:ietf:params:xml:ns:xmpp-session' (class: tigase.xmpp.impl.SessionBind) {
        queueSize = null
        threadsNo = 4
    }
    'urn:xmpp:blocking' (class: tigase.xmpp.impl.BlockingCommand) {
        queueSize = null
        threadsNo = 4
    }
    'urn:xmpp:csi:0' (class: tigase.xmpp.impl.ClientStateIndication) {
        queueSize = null
        threadsNo = 4
        logic (class: tigase.xmpp.impl.MobileV2) {
            'max-queue-size' = 10240
            queueSize = null
            threadsNo = 4
        }
    }
    'urn:xmpp:extdisco:2' (class: tigase.server.extdisco.ExternalServiceDiscoveryProcessor,
        active: false) {
        'ext-service-disco-jid' = 'ext-disco@localhost'
        queueSize = null
        threadsNo = 4
    }
    'urn:xmpp:mam:1' (class: tigase.archive.processors.Xep0313MessageArchiveManagementProcessor) {
        queueSize = null
        threadsNo = 4
    }
    'urn:xmpp:ping' (class: tigase.xmpp.impl.UrnXmppPing) {
        queueSize = null
        threadsNo = 4
    }
    'urn:xmpp:time' (class: tigase.xmpp.impl.EntityTime) {
        queueSize = null
        threadsNo = 4
    }
    'vcard-temp' (class: tigase.xmpp.impl.VCardTemp) {
        queueSize = null
        threadsNo = 4
    }
    'vcard-xep-0292' (class: tigase.xmpp.impl.VCard4) {
        queueSize = null
        threadsNo = 4
    }
    writer (class: tigase.server.xmppsession.SessionManager$SMPacketWriter) {}
    zlib (class: tigase.xmpp.impl.StartZLib) {
        queueSize = null
        threadsNo = 4
    }
}
stats (class: tigase.stats.StatisticsCollector) {
    admins = [  ]
    compId = 'stats@localhost'
    defHostname = localhost
    'scripts-dir' = 'scripts/admin'
    'stats-high-memory-level' = 95
    'stats-history-size' = 0
    'stats-update-interval' = 10L
    trusted = null
    commands {}
    'counter-data-logger' (class: tigase.stats.CounterDataLogger,
        active: false) {
        frequency = -1L
        defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        repository (class: tigase.stats.db.CounterDataLoggerRepoBean) {
            dataSourceSelection = List
            statistics = true
            aliases {}
            default (class: tigase.stats.db.CounterDataLoggerRepoBean$CounterDataLoggerConfigBean) {
                'data-source' = null
                'repo-class' = null
                defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
            }
            defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
        }
    }
}
test (class: tigase.server.test.TestComponent,
    active: false) {
    admins = [  ]
    compId = null
    defHostname = localhost
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@5d508d22
    ]
    'max-queue-size' = 10240
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@f2b90fc
    ]
    'packet-delivery-retry-count' = 15
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 4
    'processing-out-threads' = 4
    'scheduler-threads' = 1
    'scripts-dir' = 'scripts/admin'
    trusted = null
    BeanConfiguratorAdHocCommand (class: tigase.component.modules.impl.config.ConfiguratorCommand) {}
    adHocCommandManager (class: tigase.component.adhoc.AdHocCommandManager) {}
    commands {}
    defaultBeanConfigurator (class: tigase.component.DSLBeanConfiguratorWithBackwardCompatibility) {}
    disco (class: tigase.component.modules.impl.DiscoveryModule) {}
    responseManager (class: tigase.component.responses.ResponseManager) {}
    scriptCommandProcessor (class: tigase.component.ComponenScriptCommandProcessor) {}
    stanzaProcessor (class: tigase.component.modules.StanzaProcessor) {}
    'test-generator-module' (class: tigase.server.test.TestGeneratorModule) {}
    'test-spam-module' (class: tigase.server.test.TestSpamModule) {
        'abuse-address' = 'abuse@locahost'
        'bad-words' = [ 'word1', 'word2', 'word3' ]
        'log-prepend' = 'Spam detected: '
        'notification-frequency' = 10
        'packet-types' = [ 'message', 'presence', 'iq' ]
        'secure-logging' = false
        'white-list' = [ 'admin@localhost' ]
    }
    writer (class: tigase.component.AbstractKernelBasedComponent$DefaultPacketWriter) {}
}
'vhost-man' (class: tigase.vhosts.VHostManager,
    exportable: true) {
    admins = [  ]
    compId = 'vhost-man@localhost'
    defHostname = localhost
    'scripts-dir' = 'scripts/admin'
    trusted = null
    commands {}
    defaults (class: tigase.vhosts.VHostItemDefaults,
        exportable: true) {
        'domain-filter-policy' = null
        'hardened-mode' = false
        's2s-secret' = null
        trusted = null
        'vhost-anonymous-enabled' = false
        'vhost-disable-dns-check' = false
        'vhost-max-users' = 0L
        'vhost-message-forward-jid' = null
        'vhost-presence-forward-jid' = null
        'vhost-register-enabled' = true
        'vhost-tls-required' = false
    }
    vhostRepository (class: tigase.vhosts.VHostManager$DefVHostRepositoryBean) {
        'data-source' = 'default'
        'repo-class' = null
        instance (class: tigase.vhosts.VHostJDBCRepository) {
            'default-virtual-host' = 'hnmjt.mjt.net'
            'dns-def-ip' = '127.0.0.1'
            'dns-srv-def-addr' = 'localhost'
            'domains-per-user-limit' = 25
            'installation-dns-address' = null
            'repo-autoreload-interval' = 60L
        }
    }
}
ws2s (class: tigase.server.websocket.WebSocketClientConnectionManager) {
    admins = [  ]
    compId = 'ws2s@localhost'
    connectionDelay = 2000L
    'cross-domain-policy-file' = 'etc/cross-domain-policy.xml'
    defHostname = localhost
    'elements-number-limit' = 100000
    ifc = [ '*' ]
    'incoming-filters' = [
        tigase.server.filters.PacketCounter@2bb41f5c
    ]
    last_minute_bin_limit = 0L
    last_minute_packets_limit = 0L
    'max-queue-size' = 10240
    maxInactivityTime = 8000000L
    'net-buffer' = 2048
    'net-buffer-limit' = 2097152
    'outgoing-filters' = [
        tigase.server.filters.PacketCounter@24c685e7
    ]
    'packet-delivery-retry-count' = 15
    pipelining = false
    'priority-queue-implementation' = class tigase.util.workqueue.PriorityQueueRelaxed
    'processing-in-threads' = 16
    'processing-out-threads' = 16
    'scheduler-threads' = 2
    'scripts-dir' = 'scripts/admin'
    total_bin_limit = 0L
    total_packets_limit = 0L
    trafficThrottling = 'xmpp:0:0:disc,bin:0:0:disc'
    trusted = null
    'watchdog-delay' = 30000L
    'watchdog-ping-type' = XMPP
    'watchdog-timeout' = 15000L
    xmppLimitAction = DISCONNECT
    'client-trust-manager-factory' (class: tigase.server.xmppclient.ClientTrustManagerFactory) {
        clientCertCA = null
        clientCertRequired = false
    }
    commands {}
    connections (class: tigase.server.ConnectionManager$PortsConfigBean,
        exportable: true) {
        ports = [ 5290 ]
        5290 (class: tigase.server.ConnectionManager$PortConfigBean) {
            ifc = null
            'new-connections-throttling' = 200L
            socket = plain
            type = accept
        }
    }
    hybiProtocol (class: tigase.server.websocket.WebSocketHybi) {
        'ws-allow-unmasked-frames' = false
    }
    hyxie76Protocol (class: tigase.server.websocket.WebSocketHixie76,
        active: false) {}
    routingComputer (class: tigase.util.routing.RoutingsContainer$SingleMode) {}
    seeOtherHost (class: tigase.server.xmppclient.SeeOtherHost) {
        defaultHost = null
        phases = [
            OPEN
        ]
    }
    sslContextContainer (class: tigase.io.SSLContextContainer) {
        'hardened-mode' = false
        'tls-enabled-ciphers' = null
        'tls-enabled-protocols' = null
        'tls-jdk-nss-bug-workaround-active' = false
    }
    'stream-error-counter' (class: tigase.server.xmppclient.StreamErrorCounterIOProcessor,
        active: false) {}
    'urn:xmpp:sm:3' (class: tigase.server.xmppclient.StreamManagementIOProcessor,
        active: false) {
        'ack-request-count' = 10
        'ignore-undelivered-presence' = true
        'max-resumption-timeout' = 900
        'resumption-timeout' = 60
    }
}
